// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "CANTalon.h"
#include "CANSpeedController.h"

#include "ShooterSubsystem.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

ShooterSubsystem::ShooterSubsystem() : Subsystem("ShooterSubsystem") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    talonController = RobotMap::shooterSubsystemtalonController;
    talonController2 = RobotMap::shooterSubsystemtalonController2;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void ShooterSubsystem::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void ShooterSubsystem::TurnOnThrottle(){
	talonController->SetControlMode(CANSpeedController::ControlMode::kPercentVbus);
	talonController2->SetControlMode(CANSpeedController::ControlMode::kPercentVbus);
		talonController->Set(.60);
		talonController2->Set(.60);
}

void ShooterSubsystem::TurnOnRPM(){
	printf("turn on");
	//talonController->SetSafetyEnabled(true);
	//talonController2->SetSafetyEnabled(true);
	//talonController->SetExpiration(1000);

	//talonController->SetFeedbackDevice(CANTalon::FeedbackDevice::QuadEncoder);
	//talonController2->SetFeedbackDevice(CANTalon::FeedbackDevice::QuadEncoder);
	//talonController2->ConfigEncoderCodesPerRev(1024);


	talonController->SetControlMode(CANSpeedController::ControlMode::kSpeed);
	talonController->SetFeedbackDevice(CANTalon::FeedbackDevice::CtreMagEncoder_Relative);
	talonController->ConfigNominalOutputVoltage(+0.0f, -0.0f);
	talonController->ConfigPeakOutputVoltage(+12.0f, -12.0f);
	talonController->SetSensorDirection(false);

	talonController2->SetControlMode(CANSpeedController::ControlMode::kSpeed);
	talonController2->SetFeedbackDevice(CANTalon::FeedbackDevice::CtreMagEncoder_Relative);
	talonController2->ConfigNominalOutputVoltage(+0.0f, -0.0f);
	talonController2->ConfigPeakOutputVoltage(+12.0f, -12.0f);
	talonController2->SetSensorDirection(true);

	double p = .1;
	double i = 0;
	double d = 10;
	double f = .0336;
	double f2 = .0342;
	int izone = 0;
	double ramprate = 2;
	int profile = 0;
	double rpm=500;

	talonController->SelectProfileSlot(profile);
	talonController->SetPID(p, i, d, f);
	talonController->SetIzone(izone);
	talonController->SetCloseLoopRampRate(ramprate);
	talonController->Set(rpm);

	talonController2->SelectProfileSlot(profile);
	talonController2->SetPID(p, i, d, f2);
	talonController2->SetIzone(izone);
	talonController2->SetCloseLoopRampRate(ramprate);
	talonController2->Set(rpm);
}
void ShooterSubsystem::TurnOff(){
	talonController->Set(0);
	talonController2->Set(0);
}
// Put methods for controlling this subsystem
// here. Call these from Commands.
void ShooterSubsystem::PrintValues(){
	printf("%f %i %f %i \n",talonController->GetSpeed(),talonController->GetClosedLoopError(),talonController2->GetSpeed(),talonController2->GetClosedLoopError());
}

